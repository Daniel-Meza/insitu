#! /usr/bin/env python
import os

template_dir = os.path.join(os.path.dirname(__file__),'template')

def makeHeaders(path):
    headertemplate = open(os.path.join(template_dir, 'filter.hpp'), "r")
    header = open(path, "w")
    header.write(headertemplate.read().format(pkg_name, filter_name))

    headertemplate = open(os.path.join(template_dir, 'dialog.hpp'), "r")
    header = open(folderlist[2] + "/" + filter_name + "_dialog.hpp", "w")
    header.write(headertemplate.read().format(pkg_name, filter_name))

def makeSources(path):
    sourcetemplate = open(os.path.join(template_dir, 'filter.cpp'), "r")
    source = open(path, "w")
    source.write(sourcetemplate.read().format(pkg_name, filter_name))

    sourcetemplate = open(os.path.join(template_dir, 'dialog.cpp'), "r")
    source = open(folderlist[4] + "/" + filter_name + "_dialog.cpp", "w")
    source.write(sourcetemplate.read().format(pkg_name, filter_name))

# generate CMakeLists.txt
def makeBuild(path):
    if os.path.isfile(path):
        print("INFO: " + path + " already exists, skipping...")
        print("Please manually add source files to " + path)
    else:
        cmaketemplate = open(os.path.join(template_dir, 'CMakeLists.txt'), "r")
        cmake = open(path, "w")
        cmake.write(cmaketemplate.read().format(pkg_name, filter_name))

# generate plugins.xmldef makeBuild(path):
def makePlugins(path):
    if os.path.isfile(path):
        print("INFO: " + path + " already exists, skipping...")
        print("Please manually add new classes to " + path)
    else:
        cmaketemplate = open(os.path.join(template_dir, 'plugins.xml'), "r")
        plugins = open(path, "w")
        plugins.write(cmaketemplate.read().format(pkg_name, filter_name, filter_desc))

# generate package.xml
def makePackage(path):
    if os.path.isfile(path):
        print("INFO: " + path + " already exists, skipping...")
        print("Please manually add new dependencies to " + path)
    else:
        packagetemplate = open(os.path.join(template_dir, 'package.xml'), "r")
        package = open(path, "w")
        package.write(packagetemplate.read().format(pkg_name, filter_desc))

# get user input
pkg_name = input("Enter package name: ")
filter_name = input("Enter filter name: ")
filter_desc = input("Enter filter description: ")

folderlist = [
    pkg_name,
    pkg_name + "/inc",
    pkg_name + "/inc/" + filter_name,
    pkg_name + "/src",
    pkg_name + "/src/" + filter_name,
    pkg_name + "/lib",
]

# generate folder structure
for f in folderlist:
    if not os.path.exists(f):
        os.mkdir(f)

# generate dummy header and source files
makeHeaders(folderlist[2] + "/" + filter_name + ".hpp")
makeSources(folderlist[4] + "/" + filter_name + ".cpp")
makeBuild(folderlist[0] + "/CMakeLists.txt")
makePlugins(folderlist[0] + "/plugins.xml")
makePackage(folderlist[0] + "/package.xml")

os.system("tree " + pkg_name)
print("\nDone\n")

